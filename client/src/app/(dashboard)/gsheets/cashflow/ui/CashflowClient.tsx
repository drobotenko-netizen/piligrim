"use client"
import { useEffect, useMemo, useState } from 'react'
import { Button } from '@/components/ui/button'
import { Paperclip } from 'lucide-react'
import { api } from '@/lib/api-client'

function ymd(d: Date) {
  const y = d.getFullYear()
  const m = String(d.getMonth() + 1).padStart(2, '0')
  const day = String(d.getDate()).padStart(2, '0')
  return `${y}-${m}-${day}`
}

export default function CashflowClient() {
  const spreadsheetId = '1vEuHUs31i9DVxLebJ9AxHiOYXCJxQR094NhY8u3IPi8'
  const sheet = '–î–î–° –º–µ—Å—è—Ü'

  const [dateFrom, setDateFrom] = useState('')
  const [dateTo, setDateTo] = useState('')
  const [wallet, setWallet] = useState('')
  const [fund, setFund] = useState('')
  const [flowType, setFlowType] = useState('')
  const [search, setSearch] = useState('')
  const [incompleteTransfer, setIncompleteTransfer] = useState('')
  const [notImported, setNotImported] = useState('')
  const [page, setPage] = useState(1)
  const [limit, setLimit] = useState(50)
  const [rows, setRows] = useState<any[]>([])
  const [total, setTotal] = useState(0)
  const [meta, setMeta] = useState<{ minDate: string|null; maxDate: string|null; wallets: string[]; funds: string[]; flowTypes: string[] } | null>(null)
  const [loading, setLoading] = useState(false)
  const [importing, setImporting] = useState(false)
  const [importResult, setImportResult] = useState<string | null>(null)
  const [loadingToTransactions, setLoadingToTransactions] = useState(false)
  const [loadingToPayments, setLoadingToPayments] = useState(false)

  async function loadMeta() {
    const j: any = await api.get('/api/gsheets/cashflow/meta', { 
      params: { spreadsheetId, sheet } 
    })
    setMeta(j)
    if (!dateFrom && j?.minDate) setDateFrom(j.minDate.slice(0,10))
    if (!dateTo && j?.maxDate) setDateTo(j.maxDate.slice(0,10))
  }

  async function load() {
    setLoading(true)
    try {
      const params: any = { spreadsheetId, sheet, page: String(page), limit: String(limit) }
      if (dateFrom) params.dateFrom = dateFrom
      if (dateTo) params.dateTo = dateTo
      if (wallet) params.wallet = wallet
      if (fund) params.fund = fund
      if (flowType) params.flowType = flowType
      if (search) params.search = search
      if (incompleteTransfer) params.incompleteTransfer = incompleteTransfer
      if (notImported) params.notImported = notImported
      
      const j: any = await api.get('/api/gsheets/cashflow', { params })
      setRows(Array.isArray(j?.rows) ? j.rows : [])
      setTotal(Number(j?.total || 0))
    } catch {
      setRows([]); setTotal(0)
    }
    setLoading(false)
  }

  async function refreshData() {
    setImporting(true)
    setImportResult(null)
    try {
      // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
      setImportResult('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
      await api.post('/api/gsheets/cashflow/clear', { spreadsheetId, gid: '0' })
      
      // –ó–∞—Ç–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      setImportResult('üîÑ –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
      const result: any = await api.post('/api/gsheets/cashflow/import', {
        spreadsheetId,
        gid: '0',
        from: 5,
        to: 15000
      })
      
      setImportResult(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${result.processed || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`)
      await loadMeta()
      await load()
    } catch (error) {
      setImportResult(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error}`)
    }
    setImporting(false)
  }

  async function loadToTransactions() {
    setLoadingToTransactions(true)
    setImportResult(null)
    try {
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      setImportResult('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...')
      await api.post('/api/transactions/clear', {})
      
      // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      setImportResult('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...')
      const result: any = await api.post('/api/transactions/load-from-gsheets', { spreadsheetId, gid: '0' })
      
      const transferInfo = result.fullPairs ? `, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${result.fullPairs}` : ''
      const incompleteInfo = result.incompletePairs ? `, –Ω–µ–ø–æ–ª–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${result.incompletePairs}` : ''
      setImportResult(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${result.created || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}${transferInfo}${incompleteInfo}`)
    } catch (error) {
      setImportResult(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error}`)
    }
    setLoadingToTransactions(false)
  }

  async function loadToPayments() {
    setLoadingToPayments(true)
    setImportResult(null)
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ Google Sheets –≤ ExpenseDoc + Payment
      setImportResult('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –ø–ª–∞—Ç–µ–∂–∏...')
      const result: any = await api.post('/api/payments/load-from-gsheets', { spreadsheetId, gid: '0' })
      
      const transferInfo = result.fullPairs ? `\n–ü–æ–ª–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${result.fullPairs}` : ''
      const incompleteInfo = result.incompletePairs ? `\n–ù–µ–ø–æ–ª–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${result.incompletePairs}` : ''
      setImportResult(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£–¥–∞–ª–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${result.deletedPayments}\n–£–¥–∞–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${result.deletedDocs}\n–°–æ–∑–¥–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤: ${result.createdDocs}\n–°–æ–∑–¥–∞–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${result.createdPayments}${transferInfo}${incompleteInfo}\n–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.skipped}`)
      await load()
    } catch (error) {
      setImportResult(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–ª–∞—Ç–µ–∂–∏: ${error}`)
    }
    setLoadingToPayments(false)
  }

  useEffect(() => { loadMeta() }, [])
  useEffect(() => { load() }, [dateFrom, dateTo, wallet, fund, flowType, search, incompleteTransfer, notImported, page, limit])

  const pages = useMemo(() => Math.max(1, Math.ceil(total / Math.max(1, limit))), [total, limit])

  return (
    <div className="p-4 space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <h1 className="text-xl font-semibold">–î–î–° (Google)</h1>
          <a 
            href={`https://docs.google.com/spreadsheets/d/${spreadsheetId}/edit#gid=0`}
            target="_blank"
            rel="noopener noreferrer"
            className="text-gray-500 hover:text-gray-700 transition-colors"
            title="–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ Google Sheets"
          >
            <Paperclip size={18} />
          </a>
        </div>
        <div className="flex items-center gap-2">
          <Button 
            onClick={refreshData}
            disabled={importing || loadingToTransactions}
          >
            {importing ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å –∏–∑ Google Sheets'}
          </Button>
          <Button 
            onClick={loadToTransactions}
            disabled={importing || loadingToTransactions || loadingToPayments}
            variant="secondary"
          >
            {loadingToTransactions ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'}
          </Button>
          <Button 
            onClick={loadToPayments}
            disabled={importing || loadingToTransactions || loadingToPayments}
            variant="secondary"
          >
            {loadingToPayments ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –ø–ª–∞—Ç–µ–∂–∏'}
          </Button>
        </div>
      </div>
      
      {importResult && (
        <div className={`p-3 rounded ${importResult.includes('‚úÖ') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
          {importResult}
        </div>
      )}
      <div className="grid grid-cols-2 md:grid-cols-7 gap-2">
        <div>
          <label className="block text-xs text-muted-foreground">–° –¥–∞—Ç—ã</label>
          <input type="date" value={dateFrom} onChange={e => { setPage(1); setDateFrom(e.target.value) }} className="border rounded px-2 py-1 w-full" />
        </div>
        <div>
          <label className="block text-xs text-muted-foreground">–ü–æ –¥–∞—Ç—É</label>
          <input type="date" value={dateTo} onChange={e => { setPage(1); setDateTo(e.target.value) }} className="border rounded px-2 py-1 w-full" />
        </div>
        <div>
          <label className="block text-xs text-muted-foreground">–ö–æ—à–µ–ª—ë–∫</label>
          <select value={wallet} onChange={e => { setPage(1); setWallet(e.target.value) }} className="border rounded px-2 py-1 w-full">
            <option value="">‚Äî</option>
            {(meta?.wallets || []).map(w => <option key={w} value={w}>{w}</option>)}
          </select>
        </div>
        <div>
          <label className="block text-xs text-muted-foreground">–§–æ–Ω–¥</label>
          <select value={fund} onChange={e => { setPage(1); setFund(e.target.value) }} className="border rounded px-2 py-1 w-full">
            <option value="">‚Äî</option>
            {(meta?.funds || []).map(f => <option key={f} value={f}>{f}</option>)}
          </select>
        </div>
        <div>
          <label className="block text-xs text-muted-foreground">–¢–∏–ø –ø–æ—Ç–æ–∫–∞</label>
          <select value={flowType} onChange={e => { setPage(1); setFlowType(e.target.value) }} className="border rounded px-2 py-1 w-full">
            <option value="">‚Äî</option>
            {(meta?.flowTypes || []).map(t => <option key={t} value={t}>{t}</option>)}
          </select>
        </div>
        <div>
          <label className="block text-xs text-muted-foreground">–ü–æ–∏—Å–∫</label>
          <input type="text" value={search} onChange={e => { setPage(1); setSearch(e.target.value) }} placeholder="–ü–æ—Å—Ç–∞–≤—â–∏–∫/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" className="border rounded px-2 py-1 w-full" />
        </div>
        <div>
          <label className="block text-xs text-muted-foreground">–ù–µ–ø–æ–ª–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã</label>
          <select value={incompleteTransfer} onChange={e => { setPage(1); setIncompleteTransfer(e.target.value) }} className="border rounded px-2 py-1 w-full">
            <option value="">‚Äî</option>
            <option value="true">–¢–æ–ª—å–∫–æ –Ω–µ–ø–æ–ª–Ω—ã–µ</option>
          </select>
        </div>
        <div>
          <label className="block text-xs text-muted-foreground">–ù–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ</label>
          <select value={notImported} onChange={e => { setPage(1); setNotImported(e.target.value) }} className="border rounded px-2 py-1 w-full">
            <option value="">‚Äî</option>
            <option value="true">–¢–æ–ª—å–∫–æ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
          </select>
        </div>
      </div>

      <div className="flex items-center gap-2">
        <span className="text-sm text-muted-foreground">–í—Å–µ–≥–æ: {total}</span>
        <div className="ml-auto flex items-center gap-2">
          <label className="text-sm">–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:</label>
          <select value={limit} onChange={e => { setPage(1); setLimit(Number(e.target.value) || 50) }} className="border rounded px-2 py-1">
            {[25,50,100,200].map(n => <option key={n} value={n}>{n}</option>)}
          </select>
          <button disabled={page<=1} onClick={() => setPage(p => Math.max(1, p-1))} className="border rounded px-2 py-1">‚Üê</button>
          <span className="text-sm">{page}/{pages}</span>
          <button disabled={page>=pages} onClick={() => setPage(p => Math.min(pages, p+1))} className="border rounded px-2 py-1">‚Üí</button>
        </div>
      </div>

      <div className="overflow-auto border rounded">
        <table className="min-w-full text-sm">
          <thead className="bg-muted">
            <tr>
              <th className="text-left px-2 py-1">–ú–µ—Å—è—Ü</th>
              <th className="text-left px-2 py-1">–î–∞—Ç–∞</th>
              <th className="text-left px-2 py-1">–°—É–º–º–∞</th>
              <th className="text-left px-2 py-1">–ö–æ—à–µ–ª—ë–∫</th>
              <th className="text-left px-2 py-1">–ü–æ—Å—Ç–∞–≤—â–∏–∫</th>
              <th className="text-left px-2 py-1">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
              <th className="text-left px-2 py-1">–§–æ–Ω–¥</th>
              <th className="text-left px-2 py-1">–¢–∏–ø</th>
              <th className="text-left px-2 py-1">–°—Ç–∞—Ç—É—Å</th>
            </tr>
          </thead>
          <tbody>
            {rows.map((r, idx) => {
              const amt = typeof r.amount === 'number' ? (r.amount/100).toFixed(2) : ''
              const d = r.date ? String(r.date).slice(0,10) : r.dateText || ''
              const rawData = r.raw ? JSON.parse(r.raw || '{}') : {}
              const isIncomplete = rawData.incompleteTransfer
              const transferType = rawData.transferType
              const isNotImported = rawData.notImported
              const notImportedReason = rawData.notImportedReason
              return (
                <tr key={r.id || idx} className={`border-t ${isIncomplete ? 'bg-yellow-50' : isNotImported ? 'bg-red-50' : ''}`}>
                  <td className="px-2 py-1 whitespace-nowrap">{r.monthName || '‚Äî'}</td>
                  <td className="px-2 py-1 whitespace-nowrap">{d}</td>
                  <td className="px-2 py-1 whitespace-nowrap">{amt}</td>
                  <td className="px-2 py-1">{r.wallet || ''}</td>
                  <td className="px-2 py-1">{r.supplier || ''}</td>
                  <td className="px-2 py-1">{r.comment || ''}</td>
                  <td className="px-2 py-1">{r.fund || ''}</td>
                  <td className="px-2 py-1">{r.flowType || ''}</td>
                  <td className="px-2 py-1">
                    {isIncomplete && (
                      <span className="text-xs text-orange-600" title={`–ù–µ–ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: ${transferType === 'outgoing_only' ? '—Ç–æ–ª—å–∫–æ –≤—ã–±—ã—Ç–∏–µ' : '—Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ'}`}>
                        ‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
                      </span>
                    )}
                    {isNotImported && (
                      <span className="text-xs text-red-600" title={`–ù–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${notImportedReason}`}>
                        ‚ùå {notImportedReason === 'income_not_expense' ? '–î–æ—Ö–æ–¥' : 
                            notImportedReason === 'transfer' ? '–ü–µ—Ä–µ–≤–æ–¥' : 
                            notImportedReason === 'category_not_found' ? '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' : 
                            notImportedReason === 'duplicate' ? '–î—É–±–ª–∏–∫–∞—Ç' : 
                            '–ù–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ'}
                      </span>
                    )}
                  </td>
                </tr>
              )
            })}
            {rows.length === 0 && (
              <tr><td className="px-2 py-4 text-muted-foreground" colSpan={9}>{loading ? '–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  )
}


