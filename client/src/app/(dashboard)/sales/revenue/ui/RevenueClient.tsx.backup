"use client"
import { useEffect, useState, useMemo } from 'react'
import { Card, CardContent } from '@/components/ui/card'
import { Table, THead, TBody, TR, TH, TD } from '@/components/ui/table'
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from 'recharts'

const API_BASE = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:4000'

function formatNumber(value: number | null): string {
  if (value === null || value === undefined) return '-'
  return value.toLocaleString('ru-RU')
}

function formatDate(dateStr: string): string {
  try {
    const date = new Date(dateStr)
    return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })
  } catch {
    return dateStr
  }
}

function getWeekday(dateStr: string): number {
  try {
    const date = new Date(dateStr)
    return date.getDay() // 0 = воскресенье, 1 = понедельник, ..., 6 = суббота
  } catch {
    return 0
  }
}

function getWeekdayName(weekday: number): string {
  const names = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб']
  return names[weekday]
}

function groupByWeekday(data: any[]): { [key: number]: { sum: number, count: number, dates: string[] } } {
  const grouped: { [key: number]: { sum: number, count: number, dates: string[] } } = {}
  
  for (const item of data) {
    const weekday = getWeekday(item.date)
    if (!grouped[weekday]) {
      grouped[weekday] = { sum: 0, count: 0, dates: [] }
    }
    grouped[weekday].sum += item.net || 0
    grouped[weekday].count += 1
    grouped[weekday].dates.push(item.date)
  }
  
  return grouped
}

// Кастомный компонент для оси X с тремя рядами подписей
const CustomXAxisTick = (props: any) => {
  const { x, y, payload } = props
  
  // Получаем данные из глобального состояния или передаем через props
  const chartData = window.chartData || []
  const currentData = chartData[payload.value - 1] // payload.value это день (1, 2, 3...)
  
  if (!currentData) return null
  
  return (
    <g transform={`translate(${x},${y})`}>
      {/* День недели */}
      <text x={0} y={0} dy={16} textAnchor="middle" fill="#666" fontSize="10">
        {currentData.weekdayEarlier !== null ? getWeekdayName(currentData.weekdayEarlier) : 
         currentData.weekdayLater !== null ? getWeekdayName(currentData.weekdayLater) : ''}
      </text>
      {/* Дата первого месяца */}
      <text x={0} y={0} dy={28} textAnchor="middle" fill="#8884d8" fontSize="9">
        {currentData.dateEarlier || ''}
      </text>
      {/* Дата второго месяца */}
      <text x={0} y={0} dy={40} textAnchor="middle" fill="#82ca9d" fontSize="9">
        {currentData.dateLater || ''}
      </text>
    </g>
  )
}

export function RevenueClient() {
  const [year1, setYear1] = useState(2024)
  const [month1, setMonth1] = useState(9)
  const [year2, setYear2] = useState(2024)
  const [month2, setMonth2] = useState(8)
  
  const [data1, setData1] = useState<any[]>([])
  const [data2, setData2] = useState<any[]>([])
  const [loading, setLoading] = useState(false)
  const [byWeekday, setByWeekday] = useState(false)

  const loadData = async () => {
    setLoading(true)
    console.log('Loading revenue data for:', { year1, month1, year2, month2 })
    try {
      const [res1, res2] = await Promise.all([
        fetch(`${API_BASE}/api/iiko/sales/revenue?year=${year1}&month=${month1}`),
        fetch(`${API_BASE}/api/iiko/sales/revenue?year=${year2}&month=${month2}`)
      ])
      
      console.log('API responses:', { res1: res1.status, res2: res2.status })
      
      const json1 = await res1.json()
      const json2 = await res2.json()
      
      console.log('API data:', { json1, json2 })
      
      setData1(json1.revenue || [])
      setData2(json2.revenue || [])
    } catch (e) {
      console.error('Error loading revenue data:', e)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    loadData()
  }, [year1, month1, year2, month2])

  // Объединяем данные для графика
  const chartData = useMemo(() => {
    if (byWeekday) {
      // Режим по дням недели - сдвигаем данные так, чтобы дни недели совпадали
      const isEarlier = (year1 < year2) || (year1 === year2 && month1 < month2)
      const earlierData = isEarlier ? data1 : data2
      const laterData = isEarlier ? data2 : data1
      
      // Находим день недели первого дня каждого месяца
      const earlierFirstDay = earlierData[0]?.date ? getWeekday(earlierData[0].date) : 0
      const laterFirstDay = laterData[0]?.date ? getWeekday(laterData[0].date) : 0
      
      // Вычисляем сдвиг (сколько дней нужно сдвинуть более поздний месяц)
      let shift = laterFirstDay - earlierFirstDay
      if (shift < 0) shift += 7 // Если отрицательный, добавляем 7 дней
      
      const maxDays = Math.max(earlierData.length, laterData.length + shift)
      const result = []
      
      for (let i = 0; i < maxDays; i++) {
        const dayEarlier = earlierData[i]
        const dayLater = i >= shift ? laterData[i - shift] : null
        
        result.push({
          day: i + 1,
          earlier: dayEarlier?.net || null,
          later: dayLater?.net || null,
          dateEarlier: dayEarlier?.date ? formatDate(dayEarlier.date) : '',
          dateLater: dayLater?.date ? formatDate(dayLater.date) : '',
          weekdayEarlier: dayEarlier?.date ? getWeekday(dayEarlier.date) : null,
          weekdayLater: dayLater?.date ? getWeekday(dayLater.date) : null
        })
      }
      
      return result
    } else {
      // Обычный режим по дням
      const maxDays = Math.max(data1.length, data2.length)
      const result = []
      
      // Определяем, какой месяц раньше
      const isEarlier = (year1 < year2) || (year1 === year2 && month1 < month2)
      const earlierData = isEarlier ? data1 : data2
      const laterData = isEarlier ? data2 : data1
      
      for (let i = 0; i < maxDays; i++) {
        const dayEarlier = earlierData[i]
        const dayLater = laterData[i]
        
        result.push({
          day: i + 1,
          earlier: dayEarlier?.net || 0,
          later: dayLater?.net || 0,
          dateEarlier: dayEarlier?.date ? formatDate(dayEarlier.date) : '',
          dateLater: dayLater?.date ? formatDate(dayLater.date) : ''
        })
      }
      
      return result
    }
  }, [data1, data2, year1, month1, year2, month2, byWeekday])

  // Объединяем данные для таблицы
  const tableData = useMemo(() => {
    const maxDays = Math.max(data1.length, data2.length)
    const result = []
    
    for (let i = 0; i < maxDays; i++) {
      const day1 = data1[i]
      const day2 = data2[i]
      
      result.push({
        day: i + 1,
        date1: day1?.date ? formatDate(day1.date) : '',
        net1: day1?.net || 0,
        gross1: day1?.gross || 0,
        discount1: day1?.discount || 0,
        date2: day2?.date ? formatDate(day2.date) : '',
        net2: day2?.net || 0,
        gross2: day2?.gross || 0,
        discount2: day2?.discount || 0
      })
    }
    
    return result
  }, [data1, data2])

  const total1 = data1.reduce((sum, d) => sum + (d?.net || 0), 0)
  const total2 = data2.reduce((sum, d) => sum + (d?.net || 0), 0)

  return (
    <Card>
      <CardContent className="p-4 space-y-6">
        {/* Заголовок и селекторы */}
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-bold">Сравнение выручки</h1>
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2">
              <span className="text-sm font-medium">Месяц 1:</span>
              <select 
                value={year1} 
                onChange={e => setYear1(Number(e.target.value))}
                className="border rounded px-2 py-1 text-sm"
              >
                {Array.from({ length: 5 }).map((_, i) => {
                  const year = new Date().getFullYear() - 2 + i
                  return <option key={year} value={year}>{year}</option>
                })}
              </select>
              <select 
                value={month1} 
                onChange={e => setMonth1(Number(e.target.value))}
                className="border rounded px-2 py-1 text-sm"
              >
                {Array.from({ length: 12 }).map((_, i) => {
                  const month = i + 1
                  return (
                    <option key={month} value={month}>
                      {new Date(Date.UTC(2000, month - 1)).toLocaleDateString('ru-RU', { month: 'long' })}
                    </option>
                  )
                })}
              </select>
            </div>
            
            <div className="flex items-center gap-2">
              <span className="text-sm font-medium">Месяц 2:</span>
              <select 
                value={year2} 
                onChange={e => setYear2(Number(e.target.value))}
                className="border rounded px-2 py-1 text-sm"
              >
                {Array.from({ length: 5 }).map((_, i) => {
                  const year = new Date().getFullYear() - 2 + i
                  return <option key={year} value={year}>{year}</option>
                })}
              </select>
              <select 
                value={month2} 
                onChange={e => setMonth2(Number(e.target.value))}
                className="border rounded px-2 py-1 text-sm"
              >
                {Array.from({ length: 12 }).map((_, i) => {
                  const month = i + 1
                  return (
                    <option key={month} value={month}>
                      {new Date(Date.UTC(2000, month - 1)).toLocaleDateString('ru-RU', { month: 'long' })}
                    </option>
                  )
                })}
              </select>
            </div>
            
            <div className="flex items-center gap-2">
              <input
                type="checkbox"
                id="byWeekday"
                checked={byWeekday}
                onChange={(e) => setByWeekday(e.target.checked)}
                className="rounded"
              />
              <label htmlFor="byWeekday" className="text-sm">
                По дням недели
              </label>
            </div>
            
            <button 
              onClick={loadData}
              disabled={loading}
              className="border rounded px-3 py-1 text-sm disabled:opacity-50"
            >
              {loading ? 'Загрузка...' : 'Обновить'}
            </button>
          </div>
        </div>

        {/* Итоги */}
        <div className="grid grid-cols-2 gap-4">
          <div className="rounded-lg border p-4">
            <div className="text-sm text-muted-foreground">Месяц 1 ({year1}/{month1.toString().padStart(2, '0')})</div>
            <div className="text-2xl font-bold">{formatNumber(total1)} ₽</div>
          </div>
          <div className="rounded-lg border p-4">
            <div className="text-sm text-muted-foreground">Месяц 2 ({year2}/{month2.toString().padStart(2, '0')})</div>
            <div className="text-2xl font-bold">{formatNumber(total2)} ₽</div>
          </div>
        </div>

        {loading ? (
          <div className="p-8 text-center text-muted-foreground">Загрузка данных...</div>
        ) : (
          <>
            {/* График */}
            <div className="rounded-lg border p-4">
              {byWeekday && (window as any).chartData = chartData}
              <h3 className="text-lg font-semibold mb-4">
                {byWeekday ? 'График выручки по дням недели' : 'График выручки по дням'}
              </h3>
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={chartData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis 
                      dataKey="day" 
                      tick={byWeekday ? <CustomXAxisTick /> : undefined}
                      tickFormatter={byWeekday ? undefined : (value) => String(value).padStart(2, '0')}
                      tick={{ fontSize: 12 }}
                      height={byWeekday ? 50 : 30}
                    />
                    <YAxis 
                      tickFormatter={(value) => formatNumber(value)}
                      tick={{ fontSize: 12 }}
                    />
                    <Tooltip 
                      formatter={(value: any, name: string, props: any) => {
                        if (value === null) return null
                        
                        const isEarlier = (year1 < year2) || (year1 === year2 && month1 < month2)
                        const earlierMonth = isEarlier ? month1 : month2
                        const earlierYear = isEarlier ? year1 : year2
                        const laterMonth = isEarlier ? month2 : month1
                        const laterYear = isEarlier ? year2 : year1
                        
                        if (byWeekday) {
                          const payload = props.payload
                          const weekday = name === 'earlier' ? payload.weekdayEarlier : payload.weekdayLater
                          const date = name === 'earlier' ? payload.dateEarlier : payload.dateLater
                          
                          return [
                            <div key="tooltip">
                              <div>{formatNumber(value)} ₽</div>
                              <div className="text-xs text-gray-500">
                                {date} ({getWeekdayName(weekday)})
                              </div>
                            </div>,
                            name === 'earlier' ? 
                              `${new Date(Date.UTC(earlierYear, earlierMonth - 1)).toLocaleDateString('ru-RU', { month: 'long' })} ${earlierYear}` : 
                              `${new Date(Date.UTC(laterYear, laterMonth - 1)).toLocaleDateString('ru-RU', { month: 'long' })} ${laterYear}`
                          ]
                        } else {
                          return [
                            formatNumber(value), 
                            name === 'earlier' ? 
                              `${new Date(Date.UTC(earlierYear, earlierMonth - 1)).toLocaleDateString('ru-RU', { month: 'long' })} ${earlierYear}` : 
                              `${new Date(Date.UTC(laterYear, laterMonth - 1)).toLocaleDateString('ru-RU', { month: 'long' })} ${laterYear}`
                          ]
                        }
                      }}
                      labelFormatter={(label) => String(label).padStart(2, '0')}
                    />
                    <Legend 
                      formatter={(value) => {
                        const isEarlier = (year1 < year2) || (year1 === year2 && month1 < month2)
                        const earlierMonth = isEarlier ? month1 : month2
                        const earlierYear = isEarlier ? year1 : year2
                        const laterMonth = isEarlier ? month2 : month1
                        const laterYear = isEarlier ? year2 : year1
                        
                        return value === 'earlier' ? 
                          `${new Date(Date.UTC(earlierYear, earlierMonth - 1)).toLocaleDateString('ru-RU', { month: 'long' })} ${earlierYear}` : 
                          `${new Date(Date.UTC(laterYear, laterMonth - 1)).toLocaleDateString('ru-RU', { month: 'long' })} ${laterYear}`
                      }}
                    />
                    <Line 
                      type="monotone" 
                      dataKey="earlier" 
                      stroke="#8884d8" 
                      strokeWidth={2}
                      name="earlier"
                      connectNulls={false}
                      dot={(props: any) => {
                        if (props.payload.earlier === null) return null
                        if (byWeekday && props.payload.weekdayEarlier !== null && (props.payload.weekdayEarlier === 0 || props.payload.weekdayEarlier === 6)) {
                          return <circle cx={props.cx} cy={props.cy} r={4} fill="#ff6b6b" stroke="#8884d8" strokeWidth={2} />
                        }
                        return <circle cx={props.cx} cy={props.cy} r={3} fill="#8884d8" />
                      }}
                    />
                    <Line 
                      type="monotone" 
                      dataKey="later" 
                      stroke="#82ca9d" 
                      strokeWidth={2}
                      name="later"
                      connectNulls={false}
                      dot={(props: any) => {
                        if (props.payload.later === null) return null
                        if (byWeekday && props.payload.weekdayLater !== null && (props.payload.weekdayLater === 0 || props.payload.weekdayLater === 6)) {
                          return <circle cx={props.cx} cy={props.cy} r={4} fill="#ff6b6b" stroke="#82ca9d" strokeWidth={2} />
                        }
                        return <circle cx={props.cx} cy={props.cy} r={3} fill="#82ca9d" />
                      }}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </div>

            {/* Таблица */}
            <div className="rounded-lg border p-4">
              <h3 className="text-lg font-semibold mb-4">Таблица сравнения по дням</h3>
              <div className="overflow-auto">
                <Table className="w-full">
                  <THead>
                    <TR>
                      <TH className="w-16">День</TH>
                      <TH className="w-24">Дата 1</TH>
                      <TH className="text-right w-32">Выручка 1</TH>
                      <TH className="text-right w-32">Валовый 1</TH>
                      <TH className="text-right w-32">Скидка 1</TH>
                      <TH className="w-24">Дата 2</TH>
                      <TH className="text-right w-32">Выручка 2</TH>
                      <TH className="text-right w-32">Валовый 2</TH>
                      <TH className="text-right w-32">Скидка 2</TH>
                      <TH className="text-right w-32">Разница</TH>
                    </TR>
                  </THead>
                  <TBody>
                    {tableData.map((row, idx) => (
                      <TR key={idx}>
                        <TD className="font-medium">{row.day}</TD>
                        <TD>{row.date1}</TD>
                        <TD className="text-right">{formatNumber(row.net1)}</TD>
                        <TD className="text-right">{formatNumber(row.gross1)}</TD>
                        <TD className="text-right">{formatNumber(row.discount1)}</TD>
                        <TD>{row.date2}</TD>
                        <TD className="text-right">{formatNumber(row.net2)}</TD>
                        <TD className="text-right">{formatNumber(row.gross2)}</TD>
                        <TD className="text-right">{formatNumber(row.discount2)}</TD>
                        <TD className={`text-right font-medium ${row.net1 - row.net2 > 0 ? 'text-green-600' : row.net1 - row.net2 < 0 ? 'text-red-600' : ''}`}>
                          {formatNumber(row.net1 - row.net2)}
                        </TD>
                      </TR>
                    ))}
                    {!tableData.length && (
                      <TR>
                        <TD colSpan={10} className="text-center text-muted-foreground">
                          Нет данных для отображения
                        </TD>
                      </TR>
                    )}
                  </TBody>
                </Table>
              </div>
            </div>
          </>
        )}
      </CardContent>
    </Card>
  )
}
