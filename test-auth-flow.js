#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ Messaggio
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. Health check endpoint
 * 2. DEV login endpoint
 * 3. –ü—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ /me
 * 4. Logout
 */

import fetch from 'node-fetch';

const API_BASE = process.env.API_BASE || 'http://localhost:4000';

async function testAuthFlow() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint...');
    const healthResponse = await fetch(`${API_BASE}/api/health`);
    const healthData = await healthResponse.json();
    console.log('‚úÖ Health check:', healthData);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º auth ping endpoint
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º auth ping endpoint...');
    const pingResponse = await fetch(`${API_BASE}/api/auth/_ping`);
    const pingData = await pingResponse.json();
    console.log('‚úÖ Auth ping:', pingData);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º /me –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º /me –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const meResponse = await fetch(`${API_BASE}/api/auth/me`);
    const meData = await meResponse.json();
    console.log('‚úÖ /me –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', meData);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º dev login (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ)
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º dev login...');
    const devLoginResponse = await fetch(`${API_BASE}/api/auth/dev-login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ phone: '+1234567890' }) // –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä
    });
    const devLoginData = await devLoginResponse.json();
    console.log('üìù Dev login response:', devLoginData);
    
    if (devLoginResponse.ok) {
      console.log('‚úÖ Dev login —É—Å–ø–µ—à–µ–Ω!');
      
      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º /me —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π (–Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å cookie –∏–∑ response)
      console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º /me —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...');
      const cookies = devLoginResponse.headers.get('set-cookie');
      if (cookies) {
        console.log('üç™ –ü–æ–ª—É—á–µ–Ω—ã cookies:', cookies);
        
        const meAuthResponse = await fetch(`${API_BASE}/api/auth/me`, {
          headers: { 'Cookie': cookies }
        });
        const meAuthData = await meAuthResponse.json();
        console.log('‚úÖ /me —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:', meAuthData);
        
        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º logout
        console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º logout...');
        const logoutResponse = await fetch(`${API_BASE}/api/auth/logout`, {
          method: 'POST',
          headers: { 'Cookie': cookies }
        });
        const logoutData = await logoutResponse.json();
        console.log('‚úÖ Logout:', logoutData);
      }
    } else {
      console.log('‚ÑπÔ∏è Dev login –Ω–µ —É–¥–∞–ª—Å—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω) - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—É—Å—Ç–æ–π –ë–î');
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ Auth ping endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ /me endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ Dev login endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ Logout endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞', API_BASE);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAuthFlow();
