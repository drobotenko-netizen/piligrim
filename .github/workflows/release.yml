name: release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_WEB: ghcr.io/${{ github.repository }}/piligrim-web
      IMAGE_API: ghcr.io/${{ github.repository }}/piligrim-api

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: server
          file: server/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_API }}:${{ github.event_name == 'push' && github.ref_name == 'main' && github.sha || github.ref_name }}
            ${{ env.IMAGE_API }}:latest

      - name: Build and push WEB image
        uses: docker/build-push-action@v5
        with:
          context: client
          file: client/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_WEB }}:${{ github.event_name == 'push' && github.ref_name == 'main' && github.sha || github.ref_name }}
            ${{ env.IMAGE_WEB }}:latest

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            
            # Docker login to GHCR
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest images
            export IMAGE_WEB=${{ env.IMAGE_WEB }}:${{ github.event_name == 'push' && github.ref_name == 'main' && github.sha || github.ref_name }}
            export IMAGE_API=${{ env.IMAGE_API }}:${{ github.event_name == 'push' && github.ref_name == 'main' && github.sha || github.ref_name }}
            docker pull $IMAGE_WEB
            docker pull $IMAGE_API
            
            # Tag as latest for docker-compose
            docker tag $IMAGE_WEB piligrim-web:latest
            docker tag $IMAGE_API piligrim-api:latest

            # Deploy using docker-compose
            cd /srv/piligrim/app
            docker compose -f infra/docker-compose.yml up -d

            # Cleanup old images (keep last 3 versions)
            docker image prune -af --filter "until=72h"

            # Health check
            sleep 10
            curl -fsSL https://piligrim.5-star-roi.ru/api/health
            
            echo "âœ… Deploy completed successfully!"
            
