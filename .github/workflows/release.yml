name: release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_WEB: ghcr.io/${{ github.repository }}/piligrim-web
      IMAGE_API: ghcr.io/${{ github.repository }}/piligrim-api

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: server
          file: server/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_API }}:${{ github.event_name == 'push' && github.ref_name == 'main' && github.sha || github.ref_name }}
            ${{ env.IMAGE_API }}:latest

      - name: Build and push WEB image
        uses: docker/build-push-action@v5
        with:
          context: client
          file: client/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_WEB }}:${{ github.event_name == 'push' && github.ref_name == 'main' && github.sha || github.ref_name }}
            ${{ env.IMAGE_WEB }}:latest

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            export TAG=${{ github.event_name == 'push' && github.ref_name == 'main' && github.sha || github.ref_name }}
            export IMAGE_WEB=${{ env.IMAGE_WEB }}:${{ github.event_name == 'push' && github.ref_name == 'main' && github.sha || github.ref_name }}
            export IMAGE_API=${{ env.IMAGE_API }}:${{ github.event_name == 'push' && github.ref_name == 'main' && github.sha || github.ref_name }}

            # Prepare directories (files should already exist from previous deployments)
            sudo mkdir -p /srv/piligrim/app
            sudo mkdir -p /opt/infra/caddy

            # Docker login to GHCR for pulls (using GITHUB_TOKEN as fallback)
            echo ${{ secrets.GITHUB_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Ensure shared proxy network exists and caddy attached
            sudo docker network create proxy || true
            # restart caddy stack (it should already exist from bootstrap)
            if [ -f /opt/infra/caddy/docker-compose.yml ]; then
              (cd /opt/infra/caddy && sudo docker compose up -d)
              # attach to proxy
              sudo docker network connect proxy caddy || true
            fi

            # Pull new images
            sudo docker pull $IMAGE_WEB
            sudo docker pull $IMAGE_API

            # Stop and remove old containers
            sudo docker stop api web 2>/dev/null || true
            sudo docker rm api web 2>/dev/null || true

            # Run new containers with correct names and network
            sudo docker run -d --name api --network infra_default --restart unless-stopped \
              -e PORT=4000 -e NODE_ENV=production -e DATABASE_URL=file:/data/dev.db \
              -v infra_api_data:/data \
              --env-file /srv/piligrim/app/server/.env \
              $IMAGE_API

            sudo docker run -d --name web --network infra_default --restart unless-stopped \
              -e NODE_ENV=production -e PORT=3000 -e NEXT_PUBLIC_API_BASE=https://piligrim.5-star-roi.ru $IMAGE_WEB

            # Connect to proxy network for Caddy routing
            sudo docker network connect proxy api 2>/dev/null || true
            sudo docker network connect proxy web 2>/dev/null || true

            # Health check
            sleep 5
            curl -fsSL https://piligrim.5-star-roi.ru/api/health -o /dev/null
            
