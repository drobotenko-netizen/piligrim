#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

PROD_URL="https://piligrim.5-star-roi.ru"
COOKIES_FILE="$PROJECT_ROOT/prod_cookies.txt"

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ: $PROD_URL"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è cookies
if [ ! -f "$COOKIES_FILE" ]; then
  echo "‚ö†Ô∏è  –§–∞–π–ª $COOKIES_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
  echo "–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ cookies"
  exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è API —Ç–µ—Å—Ç–∞
test_api() {
  local endpoint=$1
  local method=${2:-GET}
  local data=${3:-}
  
  echo "Testing: $method $endpoint"
  
  if [ "$method" = "POST" ]; then
    curl -s -X POST "$PROD_URL$endpoint" \
      --cookie "$(cat $COOKIES_FILE)" \
      -H "Content-Type: application/json" \
      -d "$data" | jq '.' 2>/dev/null || echo "Failed"
  else
    curl -s "$PROD_URL$endpoint" \
      --cookie "$(cat $COOKIES_FILE)" | jq '.' 2>/dev/null || echo "Failed"
  fi
  echo ""
}

case "${1:-all}" in
  health)
    echo "1. Health check:"
    curl -s "$PROD_URL/api/health" | jq '.'
    echo ""
    ;;
    
  auth)
    echo "2. Auth check:"
    test_api "/api/auth/me"
    ;;
    
  iiko)
    echo "3. iiko last data date:"
    test_api "/api/iiko/last-data-date"
    
    echo "4. iiko balances-table:"
    LAST_DATE=$(curl -s "$PROD_URL/api/iiko/last-data-date" | jq -r '.date')
    echo "   Using date: $LAST_DATE"
    test_api "/api/iiko/stores/balances-table" "POST" "{\"timestamp\":\"${LAST_DATE}T12:00:00.000\",\"from\":\"$LAST_DATE\",\"to\":\"$LAST_DATE\"}"
    ;;
    
  purchasing)
    echo "5. Purchasing APIs:"
    test_api "/api/purchasing/buffers"
    test_api "/api/purchasing/product-suppliers"
    test_api "/api/counterparties?type=–ü–æ—Å—Ç–∞–≤—â–∏–∫"
    ;;
    
  logs)
    echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ API:"
    ssh yc-vm "sudo docker logs api --tail 50"
    echo ""
    echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ Web:"
    ssh yc-vm "sudo docker logs web --tail 20"
    ;;
    
  status)
    echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    ssh yc-vm "sudo docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Image}}'"
    ;;
    
  all)
    test_api "/api/health"
    test_api "/api/auth/me"
    test_api "/api/iiko/last-data-date"
    test_api "/api/purchasing/buffers"
    test_api "/api/counterparties?type=–ü–æ—Å—Ç–∞–≤—â–∏–∫"
    ;;
    
  *)
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  health      - –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint"
    echo "  auth        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
    echo "  iiko        - –¢–µ—Å—Ç iiko API"
    echo "  purchasing  - –¢–µ—Å—Ç purchasing API"
    echo "  logs        - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  status      - –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  all         - –í—Å–µ —Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo ""
    ;;
esac

