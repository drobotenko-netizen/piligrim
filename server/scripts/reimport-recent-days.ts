#!/usr/bin/env npx tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx scripts/reimport-recent-days.ts [days]
 * –ü—Ä–∏–º–µ—Ä: npx tsx scripts/reimport-recent-days.ts 7
 */

import { PrismaClient } from '@prisma/client'
import { IikoClient } from '../src/modules/iiko/client'
import { importReceiptsForDate } from '../src/modules/iiko/etl/receipts'

const prisma = new PrismaClient()
const client = new IikoClient()

async function main() {
  const daysToImport = Number(process.argv[2]) || 7
  
  console.log(`üì• –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∏–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ${daysToImport} –¥–Ω–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥...`)
  
  const results = []
  
  for (let i = 0; i < daysToImport; i++) {
    const date = new Date()
    date.setDate(date.getDate() - i)
    const ymd = date.toISOString().slice(0, 10)
    
    console.log(`\nüìÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ${ymd} (–¥–µ–Ω—å ${i + 1}/${daysToImport})...`)
    
    try {
      const result = await importReceiptsForDate(prisma, client, ymd)
      results.push(result)
      console.log(`‚úÖ ${ymd}: —Å–æ–∑–¥–∞–Ω–æ ${result.created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${result.updated}`)
    } catch (e: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ${ymd}:`, e.message)
    }
  }
  
  console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!')
  console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
  console.log(`- –í—Å–µ–≥–æ –¥–Ω–µ–π: ${results.length}`)
  console.log(`- –°–æ–∑–¥–∞–Ω–æ —á–µ–∫–æ–≤: ${results.reduce((sum, r) => sum + r.created, 0)}`)
  console.log(`- –û–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ–∫–æ–≤: ${results.reduce((sum, r) => sum + r.updated, 0)}`)
}

main()
  .catch(e => {
    console.error('–û—à–∏–±–∫–∞:', e)
    process.exit(1)
  })
  .finally(() => prisma.$disconnect())







