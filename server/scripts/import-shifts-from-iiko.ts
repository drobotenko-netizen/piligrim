import { PrismaClient } from '@prisma/client'
import { IikoClient } from '../src/modules/iiko/client'

const prisma = new PrismaClient()
const iikoClient = new IikoClient()

// –ú–∞–ø–ø–∏–Ω–≥ orderType + deliveryServiceType ‚Üí Channel
function mapToChannel(orderType: string | null, deliveryServiceType: string | null): string {
  if (deliveryServiceType === 'COURIER') return 'Grab' // –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
  if (deliveryServiceType === 'PICKUP') return 'Pickup' // –°–∞–º–æ–≤—ã–≤–æ–∑
  if (orderType === '–î–æ—Å—Ç–∞–≤–∫–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑') return 'Pickup'
  if (orderType === '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º') return 'Delivery'
  return 'Dine-in' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤ –∑–∞–ª–µ
}

// –ú–∞–ø–ø–∏–Ω–≥ payType –∏–∑ iiko ‚Üí TenderType
function mapToTenderType(payType: string): string {
  const lower = payType.toLowerCase()
  if (lower.includes('–Ω–∞–ª–∏—á–Ω')) return '–ù–∞–ª–∏—á–Ω—ã–µ'
  if (lower.includes('—Å–±–µ—Ä') || lower.includes('card')) return '–ö–∞—Ä—Ç–∞'
  if (lower.includes('qr') || lower.includes('–∫—å—é–∞—Ä')) return 'QR-–∫–æ–¥'
  if (lower.includes('–±–æ–Ω—É—Å')) return '–ë–æ–Ω—É—Å—ã'
  return '–ü—Ä–æ—á–µ–µ'
}

async function importShiftsFromIiko(fromDate: string, toDate: string, mode: 'merge' | 'separate' = 'merge') {
  const modeText = mode === 'merge' ? '–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º' : '—Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ —Å–º–µ–Ω—ã'
  console.log(`üîÑ –ò–º–ø–æ—Ä—Ç —Å–º–µ–Ω –∏–∑ iiko API + —á–µ–∫–æ–≤: ${fromDate} - ${toDate}`)
  console.log(`üìã –†–µ–∂–∏–º: ${modeText}`)

  const tenant = await prisma.tenant.findFirst()
  if (!tenant) {
    throw new Error('Tenant not found')
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ iiko API
  let iikoShifts: any[] = []
  try {
    iikoShifts = await iikoClient.getCashShifts({
      openDateFrom: fromDate,
      openDateTo: toDate,
      status: 'ANY'
    })
    console.log(`üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–º–µ–Ω –∏–∑ iiko API: ${iikoShifts.length}`)
  } catch (e) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–º–µ–Ω—ã –∏–∑ iiko API: ${e}`)
    console.log(`   –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ —á–µ–∫–∞–º`)
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª—ã –∏ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
  const channelMap = new Map<string, string>()
  const tenderTypeMap = new Map<string, string>()

  const channelNames = ['Dine-in', 'Pickup', 'Delivery', 'Grab', 'Foodpanda']
  for (const name of channelNames) {
    let channel = await prisma.channel.findFirst({
      where: { tenantId: tenant.id, name }
    })
    if (!channel) {
      channel = await prisma.channel.create({
        data: { tenantId: tenant.id, name }
      })
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª: ${name}`)
    }
    channelMap.set(name, channel.id)
  }

  const tenderNames = ['–ù–∞–ª–∏—á–Ω—ã–µ', '–ö–∞—Ä—Ç–∞', 'QR-–∫–æ–¥', '–ë–æ–Ω—É—Å—ã', '–ü—Ä–æ—á–µ–µ']
  for (const name of tenderNames) {
    let tender = await prisma.tenderType.findFirst({
      where: { tenantId: tenant.id, name }
    })
    if (!tender) {
      tender = await prisma.tenderType.create({
        data: { tenantId: tenant.id, name }
      })
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${name}`)
    }
    tenderTypeMap.set(name, tender.id)
  }

  // –ü–æ–ª—É—á–∞–µ–º —á–µ–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
  const receipts = await prisma.iikoReceipt.findMany({
    where: {
      date: {
        gte: new Date(fromDate),
        lt: new Date(toDate)
      },
      OR: [
        { isDeleted: false },
        { isDeleted: null }
      ]
    },
    orderBy: { date: 'asc' }
  })

  console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ —á–µ–∫–æ–≤: ${receipts.length}`)

  // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º UUID —Å –∏–º–µ–Ω–∞–º–∏ - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –∏ –±–µ—Ä—ë–º —Å–∞–º–æ–≥–æ —á–∞—Å—Ç–æ–≥–æ waiter
  const uuidToNameMap = new Map<string, Map<string, number>>()
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–º–µ–Ω—ã –ø–æ –¥–Ω—è–º –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  const shiftsByDayTemp = new Map<string, any[]>()
  for (const iikoShift of iikoShifts) {
    if (!iikoShift.openDate) continue
    const dateKey = new Date(iikoShift.openDate).toISOString().slice(0, 10)
    if (!shiftsByDayTemp.has(dateKey)) {
      shiftsByDayTemp.set(dateKey, [])
    }
    shiftsByDayTemp.get(dateKey)!.push(iikoShift)
  }
  
  for (const [dateKey, dayShifts] of shiftsByDayTemp.entries()) {
    // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã—Ç—É—é —Å–º–µ–Ω—É –¥–ª—è UUID
    const lastShift = dayShifts.sort((a: any, b: any) => 
      (b.closeDate ? new Date(b.closeDate).getTime() : 0) - 
      (a.closeDate ? new Date(a.closeDate).getTime() : 0)
    )[0]
    
    if (!lastShift.responsibleUserId) continue
    
    // –ß–µ–∫–∏ –∑–∞ –¥–µ–Ω—å
    const dayReceipts = receipts.filter(r => {
      const rDate = r.date
      const dayStart = new Date(dateKey + 'T00:00:00.000Z')
      const dayEnd = new Date(dateKey + 'T23:59:59.999Z')
      return rDate >= dayStart && rDate <= dayEnd && r.waiter
    })
    
    const waiterCounts = new Map<string, number>()
    dayReceipts.forEach(r => {
      if (r.waiter) {
        waiterCounts.set(r.waiter, (waiterCounts.get(r.waiter) || 0) + 1)
      }
    })
    
    let maxName = ''
    let maxCount = 0
    for (const [name, count] of waiterCounts.entries()) {
      if (count > maxCount) {
        maxCount = count
        maxName = name
      }
    }
    
    if (maxName) {
      if (!uuidToNameMap.has(lastShift.responsibleUserId)) {
        uuidToNameMap.set(lastShift.responsibleUserId, new Map())
      }
      uuidToNameMap.get(lastShift.responsibleUserId)!.set(maxName, maxCount)
    }
  }
  
  const employeesMap = new Map<string, string>()
  for (const [uuid, names] of uuidToNameMap.entries()) {
    let bestName = ''
    let bestCount = 0
    for (const [name, count] of names.entries()) {
      if (count > bestCount) {
        bestCount = count
        bestName = name
      }
    }
    if (bestName) {
      employeesMap.set(uuid, bestName)
    }
  }
  
  console.log(`üë• –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ UUID ‚Üí –∏–º–µ–Ω–∞: ${employeesMap.size}`)
  for (const [uuid, name] of employeesMap.entries()) {
    console.log(`   ${uuid.slice(0, 8)}... ‚Üí ${name}`)
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–º–µ–Ω—ã iiko –ø–æ –¥–Ω—è–º (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–º–µ–Ω –≤ –¥–µ–Ω—å)
  const shiftsByDay = new Map<string, any[]>()
  for (const iikoShift of iikoShifts) {
    if (!iikoShift.openDate) continue
    const dateKey = new Date(iikoShift.openDate).toISOString().slice(0, 10)
    if (!shiftsByDay.has(dateKey)) {
      shiftsByDay.set(dateKey, [])
    }
    shiftsByDay.get(dateKey)!.push(iikoShift)
  }

  let shiftsCreated = 0
  let salesCreated = 0

  if (mode === 'merge') {
    // –†–ï–ñ–ò–ú 1: –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–º–µ–Ω—ã –ø–æ –¥–Ω—è–º
    for (const [dateKey, dayShifts] of shiftsByDay.entries()) {
      console.log(`\nüìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${dateKey}: ${dayShifts.length} —Å–º–µ–Ω(—ã) iiko`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–º–µ–Ω–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
      const existingShift = await prisma.shift.findFirst({
        where: {
          tenantId: tenant.id,
          openAt: {
            gte: new Date(dateKey + 'T00:00:00.000Z'),
            lt: new Date(dateKey + 'T23:59:59.999Z')
          }
        }
      })

      if (existingShift) {
        console.log(`  ‚è≠Ô∏è  –°–º–µ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
        continue
      }

      // –ë–µ—Ä—ë–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —Å–∞–º—É—é –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è
      const openAt = new Date(Math.min(...dayShifts.map((s: any) => new Date(s.openDate).getTime())))
      const closeAt = new Date(Math.max(...dayShifts.map((s: any) => 
        s.closeDate ? new Date(s.closeDate).getTime() : new Date().getTime()
      )))
      
      // –ë–µ—Ä—ë–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã
      const lastShift = dayShifts.sort((a: any, b: any) => 
        (b.closeDate ? new Date(b.closeDate).getTime() : 0) - 
        (a.closeDate ? new Date(a.closeDate).getTime() : 0)
      )[0]
      
      const userId = lastShift.responsibleUserId || lastShift.managerId
      const closedBy = userId ? (employeesMap.get(userId) || userId) : 'unknown'
      
      const sessionNumbers = dayShifts.map((s: any) => s.sessionNumber).join(', ')
      console.log(`  üì° –ò–∑ iiko API: —Å–º–µ–Ω—ã #${sessionNumbers}`)
      console.log(`     –î–∞—Ç—ã: ${openAt.toISOString()} - ${closeAt.toISOString()}`)
      console.log(`     –ó–∞–∫—Ä—ã–ª: ${closedBy}`)
      
      // –ß–µ–∫–∏ –∑–∞ –î–ï–ù–¨
      const dayStart = new Date(dateKey + 'T00:00:00.000Z')
      const dayEnd = new Date(dateKey + 'T23:59:59.999Z')
      
      const shiftReceipts = receipts.filter(r => {
        const rDate = r.date
        return rDate >= dayStart && rDate <= dayEnd
      })
      
      console.log(`  üìÑ –ß–µ–∫–æ–≤ –∑–∞ –¥–µ–Ω—å: ${shiftReceipts.length}`)

    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ channel √ó tenderType
    type SaleKey = string // `${channelName}__${tenderTypeName}`
    const salesAgg = new Map<SaleKey, { channel: string; tender: string; gross: number; discounts: number; refunds: number }>()

    for (const receipt of shiftReceipts) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª
      const channelName = mapToChannel(receipt.orderType, receipt.deliveryServiceType)
      
      // –ü–∞—Ä—Å–∏–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
      let payTypes: string[] = []
      try {
        if (receipt.payTypesJson) {
          payTypes = JSON.parse(receipt.payTypesJson)
        }
      } catch {
        payTypes = ['–ü—Ä–æ—á–µ–µ']
      }

      if (payTypes.length === 0) payTypes = ['–ü—Ä–æ—á–µ–µ']

      // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É —á–µ–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–µ–∂–¥—É —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
      // –í–ê–ñ–ù–û: receipt.net –≤ —Ü–µ–ª—ã—Ö —Ä—É–±–ª—è—Ö, –Ω—É–∂–Ω–æ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 100 –¥–ª—è –∫–æ–ø–µ–µ–∫!
      const netAmountCents = (receipt.net || 0) * 100
      const amountPerType = Math.floor(netAmountCents / payTypes.length)

      for (const payType of payTypes) {
        const tenderName = mapToTenderType(payType)
        const key: SaleKey = `${channelName}__${tenderName}`

        const sale = salesAgg.get(key) || { 
          channel: channelName, 
          tender: tenderName, 
          gross: 0, 
          discounts: 0, 
          refunds: 0 
        }

        sale.gross += amountPerType
        // discounts –∏ refunds —Ç–æ–∂–µ –≤ —Ü–µ–ª—ã—Ö —Ä—É–±–ª—è—Ö
        if (receipt.isReturn) {
          sale.refunds += Math.abs(receipt.returnSum || 0) * 100
        }

        salesAgg.set(key, sale)
      }
    }

      // –°–æ–∑–¥–∞—ë–º —Å–º–µ–Ω—É
      const shift = await prisma.shift.create({
        data: {
          tenantId: tenant.id,
          openAt,
          closeAt,
          openedBy: closedBy,
          closedBy: closedBy,
          note: `–°–º–µ–Ω—ã iiko #${sessionNumbers}: ${shiftReceipts.length} —á–µ–∫–æ–≤`,
          iikoSessionNum: dayShifts.length > 1 ? null : dayShifts[0].sessionNumber,
          iikoCashRegNum: dayShifts.length > 1 ? null : dayShifts[0].cashRegNumber
        }
      })

    shiftsCreated++
    console.log(`  ‚úÖ –°–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞: ${openAt.toISOString()} - ${closeAt.toISOString()}`)

    // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥–∞–∂–∏
    for (const [key, sale] of salesAgg.entries()) {
      const channelId = channelMap.get(sale.channel)
      const tenderTypeId = tenderTypeMap.get(sale.tender)

      if (!channelId || !tenderTypeId) {
        console.warn(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫: –∫–∞–Ω–∞–ª=${sale.channel}, —Å–ø–æ—Å–æ–±=${sale.tender}`)
        continue
      }

      await prisma.shiftSale.create({
        data: {
          shiftId: shift.id,
          channelId,
          tenderTypeId,
          grossAmount: sale.gross,
          discounts: sale.discounts,
          refunds: sale.refunds
        }
      })

      salesCreated++
      console.log(`    üìä ${sale.channel} √ó ${sale.tender}: ${sale.gross / 100} ‚ÇΩ`)
    }
  }
  } else {
    // –†–ï–ñ–ò–ú 2: –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–º–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–π —Å–º–µ–Ω—ã iiko
    for (const iikoShift of iikoShifts) {
      if (!iikoShift.openDate) continue
      
      const openAt = new Date(iikoShift.openDate)
      const closeAt = iikoShift.closeDate ? new Date(iikoShift.closeDate) : new Date()
      const dateKey = openAt.toISOString().slice(0, 10)
      
      console.log(`\nüìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã #${iikoShift.sessionNumber} (${dateKey})`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–º–µ–Ω–∞
      const existingShift = await prisma.shift.findFirst({
        where: {
          tenantId: tenant.id,
          openAt,
          closeAt
        }
      })

      if (existingShift) {
        console.log(`  ‚è≠Ô∏è  –°–º–µ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
        continue
      }

      const userId = iikoShift.responsibleUserId || iikoShift.managerId
      const closedBy = userId ? (employeesMap.get(userId) || userId) : 'unknown'
      
      console.log(`  üì° –ò–∑ iiko API:`)
      console.log(`     –î–∞—Ç—ã: ${openAt.toISOString()} - ${closeAt.toISOString()}`)
      console.log(`     –ó–∞–∫—Ä—ã–ª: ${closedBy}`)
      
      // –ß–µ–∫–∏ –ö–û–ù–ö–†–ï–¢–ù–û –≠–¢–û–ô –°–ú–ï–ù–´ –ø–æ sessionNumber
      const shiftReceipts = receipts.filter(r => {
        return r.sessionNumber === iikoShift.sessionNumber
      })
      
      console.log(`  üìÑ –ß–µ–∫–æ–≤ –≤ —Å–º–µ–Ω–µ #${iikoShift.sessionNumber}: ${shiftReceipts.length}`)

      // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏
      type SaleKey = string
      const salesAgg = new Map<SaleKey, { channel: string; tender: string; gross: number; discounts: number; refunds: number }>()

      for (const receipt of shiftReceipts) {
        const channelName = mapToChannel(receipt.orderType, receipt.deliveryServiceType)
        
        let payTypes: string[] = []
        try {
          if (receipt.payTypesJson) {
            const parsed = JSON.parse(receipt.payTypesJson)
            if (Array.isArray(parsed)) {
              payTypes = parsed
            }
          }
        } catch {}

        if (payTypes.length === 0) payTypes = ['–ü—Ä–æ—á–µ–µ']

        const netAmountCents = (receipt.net || 0) * 100
        const amountPerType = Math.floor(netAmountCents / payTypes.length)

        for (const payType of payTypes) {
          const tenderName = mapToTenderType(payType)
          const key: SaleKey = `${channelName}__${tenderName}`

          const sale = salesAgg.get(key) || { 
            channel: channelName, 
            tender: tenderName, 
            gross: 0, 
            discounts: 0, 
            refunds: 0 
          }

          sale.gross += amountPerType
          if (receipt.isReturn) {
            sale.refunds += Math.abs(receipt.returnSum || 0) * 100
          }

          salesAgg.set(key, sale)
        }
      }

      // –°–æ–∑–¥–∞—ë–º —Å–º–µ–Ω—É
      const shift = await prisma.shift.create({
        data: {
          tenantId: tenant.id,
          openAt,
          closeAt,
          openedBy: closedBy,
          closedBy: closedBy,
          note: `–°–º–µ–Ω–∞ iiko #${iikoShift.sessionNumber}: ${shiftReceipts.length} —á–µ–∫–æ–≤`,
          iikoSessionNum: iikoShift.sessionNumber,
          iikoCashRegNum: iikoShift.cashRegNumber
        }
      })

      shiftsCreated++
      console.log(`  ‚úÖ –°–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞: ${openAt.toISOString()} - ${closeAt.toISOString()}`)

      // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥–∞–∂–∏
      for (const [key, sale] of salesAgg.entries()) {
        const channelId = channelMap.get(sale.channel)
        const tenderTypeId = tenderTypeMap.get(sale.tender)

        if (!channelId || !tenderTypeId) {
          console.warn(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫: –∫–∞–Ω–∞–ª=${sale.channel}, —Å–ø–æ—Å–æ–±=${sale.tender}`)
          continue
        }

        await prisma.shiftSale.create({
          data: {
            shiftId: shift.id,
            channelId,
            tenderTypeId,
            grossAmount: sale.gross,
            discounts: sale.discounts,
            refunds: sale.refunds
          }
        })

        salesCreated++
        console.log(`    üìä ${sale.channel} √ó ${sale.tender}: ${sale.gross / 100} ‚ÇΩ`)
      }
    }
  }

  console.log(`\n‚ú® –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:`)
  console.log(`  –°–º–µ–Ω —Å–æ–∑–¥–∞–Ω–æ: ${shiftsCreated}`)
  console.log(`  –ü—Ä–æ–¥–∞–∂ —Å–æ–∑–¥–∞–Ω–æ: ${salesCreated}`)
}

// –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const fromDate = process.argv[2] || '2025-01-01'
const toDate = process.argv[3] || new Date().toISOString().slice(0, 10)
const mode = (process.argv[4] === 'separate' ? 'separate' : 'merge') as 'merge' | 'separate'

importShiftsFromIiko(fromDate, toDate, mode)
  .then(() => {
    console.log('‚úÖ –ì–æ—Ç–æ–≤–æ!')
    prisma.$disconnect()
  })
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', e)
    prisma.$disconnect()
    process.exit(1)
  })

