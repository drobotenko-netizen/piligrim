import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function markExistingIncompleteTransfers() {
  try {
    console.log('üîç –û—Ç–º–µ—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–µ–ø–æ–ª–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã...')

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –±–µ–∑ fromAccountId/toAccountId
    const unpairedTransfers = await prisma.transaction.findMany({
      where: {
        kind: 'transfer',
        OR: [
          { fromAccountId: null },
          { toAccountId: null }
        ]
      },
      orderBy: [{ paymentDate: 'asc' }, { amount: 'asc' }],
      select: {
        id: true,
        paymentDate: true,
        amount: true,
        accountId: true
      }
    })

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø–æ–ª–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${unpairedTransfers.length}`)

    let markedCount = 0

    for (const tx of unpairedTransfers) {
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π GsCashflowRow
      const account = await prisma.account.findUnique({ 
        where: { id: tx.accountId || '' },
        select: { name: true }
      })

      if (!account) continue

      // –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º - –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      const gsRow = await prisma.gsCashflowRow.findFirst({
        where: {
          date: tx.paymentDate,
          amount: tx.amount,
          wallet: account.name,
          fund: {
            contains: '–ü–µ—Ä–µ–≤–æ–¥'
          }
        }
      })

      if (gsRow) {
        // –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const originalData = JSON.parse(gsRow.raw || '[]')
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        const newRawData = {
          originalData: originalData,
          incompleteTransfer: true,
          transferType: tx.amount < 0 ? 'outgoing_only' : 'incoming_only'
        }
        
        await prisma.gsCashflowRow.update({
          where: { id: gsRow.id },
          data: { raw: JSON.stringify(newRawData) }
        })
        
        markedCount++
        console.log(`‚úÖ –û—Ç–º–µ—á–µ–Ω–∞ –∑–∞–ø–∏—Å—å: ${tx.paymentDate.toISOString().slice(0,10)} - ${account.name} - ${tx.amount} –∫–æ–ø.`)
      }
    }

    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ—Ç–º–µ—á–µ–Ω–æ ${markedCount} –∑–∞–ø–∏—Å–µ–π –≤ GsCashflowRow`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

markExistingIncompleteTransfers()
  .then(() => process.exit(0))
  .catch(() => process.exit(1))
