import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkUnpairedTransfers() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –±–µ–∑ –ø–∞—Ä...')

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    const transferTransactions = await prisma.transaction.findMany({
      where: {
        kind: 'transfer'
      },
      orderBy: [{ paymentDate: 'asc' }, { amount: 'asc' }],
      select: {
        id: true,
        paymentDate: true,
        amount: true,
        accountId: true,
        fromAccountId: true,
        toAccountId: true,
        note: true
      }
    })

    console.log(`üìä –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${transferTransactions.length}`)

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ —Å—É–º–º–µ
    const groupedByDateAndAmount = new Map<string, any[]>()
    
    for (const tx of transferTransactions) {
      const dateKey = tx.paymentDate.toISOString().split('T')[0]
      const amountKey = Math.abs(tx.amount)
      const groupKey = `${dateKey}_${amountKey}`
      if (!groupedByDateAndAmount.has(groupKey)) {
        groupedByDateAndAmount.set(groupKey, [])
      }
      groupedByDateAndAmount.get(groupKey)?.push(tx)
    }

    console.log(`üìà –ì—Ä—É–ø–ø –ø–æ –¥–∞—Ç–µ/—Å—É–º–º–µ: ${groupedByDateAndAmount.size}`)

    let pairedCount = 0
    let unpairedCount = 0
    const unpairedGroups: any[] = []

    for (const [groupKey, group] of groupedByDateAndAmount.entries()) {
      const outgoing = group.filter(tx => tx.amount < 0)
      const incoming = group.filter(tx => tx.amount > 0)

      if (outgoing.length === 1 && incoming.length === 1) {
        pairedCount += group.length
      } else {
        unpairedCount += group.length
        unpairedGroups.push({
          groupKey,
          outgoing: outgoing.length,
          incoming: incoming.length,
          total: group.length,
          transactions: group
        })
      }
    }

    console.log(`‚úÖ –°–ø–∞—Ä–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${pairedCount}`)
    console.log(`‚ùå –ù–µ—Å–ø–∞—Ä–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${unpairedCount}`)
    console.log(`üìä –ì—Ä—É–ø–ø –±–µ–∑ –ø–∞—Ä: ${unpairedGroups.length}`)

    if (unpairedGroups.length > 0) {
      console.log('\nüîç –ü—Ä–∏–º–µ—Ä—ã –Ω–µ—Å–ø–∞—Ä–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:')
      unpairedGroups.slice(0, 10).forEach((group, i) => {
        console.log(`\n${i + 1}. –ì—Ä—É–ø–ø–∞ ${group.groupKey}:`)
        console.log(`   –ò—Å—Ö–æ–¥—è—â–∏—Ö: ${group.outgoing}, –í—Ö–æ–¥—è—â–∏—Ö: ${group.incoming}, –í—Å–µ–≥–æ: ${group.total}`)
        group.transactions.forEach((tx: any) => {
          const accountInfo = tx.accountId ? `–°—á–µ—Ç: ${tx.accountId}` : '–ë–µ–∑ —Å—á–µ—Ç–∞'
          const fromToInfo = tx.fromAccountId && tx.toAccountId ? 
            `–û—Ç: ${tx.fromAccountId} ‚Üí –ö: ${tx.toAccountId}` : 
            '–ë–µ–∑ from/to'
          console.log(`   ${tx.paymentDate.toISOString().slice(0,10)} | ${tx.amount} –∫–æ–ø. | ${accountInfo} | ${fromToInfo}`)
        })
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å fromAccountId/toAccountId
    const transfersWithAccounts = await prisma.transaction.findMany({
      where: {
        kind: 'transfer',
        AND: [
          { fromAccountId: { not: null } },
          { toAccountId: { not: null } }
        ]
      },
      select: {
        id: true,
        paymentDate: true,
        amount: true,
        fromAccountId: true,
        toAccountId: true
      }
    })

    console.log(`\nüîó –ü–µ—Ä–µ–≤–æ–¥–æ–≤ —Å fromAccountId/toAccountId: ${transfersWithAccounts.length}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –±–µ–∑ fromAccountId/toAccountId
    const transfersWithoutAccounts = await prisma.transaction.findMany({
      where: {
        kind: 'transfer',
        OR: [
          { fromAccountId: null },
          { toAccountId: null }
        ]
      },
      select: {
        id: true,
        paymentDate: true,
        amount: true,
        accountId: true,
        fromAccountId: true,
        toAccountId: true,
        note: true
      }
    })

    console.log(`‚ùå –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –±–µ–∑ fromAccountId/toAccountId: ${transfersWithoutAccounts.length}`)

    if (transfersWithoutAccounts.length > 0) {
      console.log('\nüîç –ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –±–µ–∑ from/to:')
      transfersWithoutAccounts.slice(0, 5).forEach((tx, i) => {
        console.log(`   ${i + 1}. ${tx.paymentDate.toISOString().slice(0,10)} | ${tx.amount} –∫–æ–ø. | –°—á–µ—Ç: ${tx.accountId} | –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${tx.note || '–Ω–µ—Ç'}`)
      })
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

checkUnpairedTransfers()
  .then(() => process.exit(0))
  .catch(() => process.exit(1))
