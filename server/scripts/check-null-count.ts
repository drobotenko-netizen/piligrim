import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkNullCount() {
  try {
    console.log('üîç –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å NULL –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é...\n')
    
    // –ü–æ–ª—É—á–∞–µ–º tenant
    const tenant = await prisma.tenant.findFirst()
    if (!tenant) {
      throw new Error('Tenant –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
    console.log('üìä 1. –¢–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å NULL –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é:')
    
    const nullCount = await prisma.transaction.count({
      where: { 
        tenantId: tenant.id,
        activity: null
      }
    })
    
    console.log(`–ó–∞–ø–∏—Å–µ–π —Å activity = NULL: ${nullCount}`)
    
    const emptyStringCount = await prisma.transaction.count({
      where: { 
        tenantId: tenant.id,
        activity: ''
      }
    })
    
    console.log(`–ó–∞–ø–∏—Å–µ–π —Å activity = "": ${emptyStringCount}`)
    
    const nullStringCount = await prisma.transaction.count({
      where: { 
        tenantId: tenant.id,
        activity: 'NULL'
      }
    })
    
    console.log(`–ó–∞–ø–∏—Å–µ–π —Å activity = "NULL": ${nullStringCount}`)
    
    console.log('\nüìä 2. –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å NULL –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é:')
    
    const nullExamples = await prisma.transaction.findMany({
      where: { 
        tenantId: tenant.id,
        activity: null
      },
      select: {
        id: true,
        kind: true,
        amount: true,
        activity: true,
        note: true,
        paymentDate: true,
        category: {
          select: { name: true, activity: true }
        }
      },
      take: 10,
      orderBy: { paymentDate: 'desc' }
    })
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${nullExamples.length} –ø—Ä–∏–º–µ—Ä–æ–≤:`)
    nullExamples.forEach((tx, index) => {
      console.log(`  ${index + 1}. ${tx.kind} ${(tx.amount/100).toFixed(2)}‚ÇΩ (${tx.paymentDate.toISOString().slice(0,10)})`)
      console.log(`     –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${tx.activity}`)
      console.log(`     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${tx.category?.name || '–Ω–µ—Ç'} (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${tx.category?.activity || '–Ω–µ—Ç'})`)
      console.log(`     –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${tx.note || '–Ω–µ—Ç'}`)
      console.log('')
    })
    
    console.log('\nüìä 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ Google Sheets:')
    
    const gsNullCount = await prisma.gsCashflowRow.count({
      where: { activity: null }
    })
    
    console.log(`–ó–∞–ø–∏—Å–µ–π –≤ Google Sheets —Å activity = NULL: ${gsNullCount}`)
    
    const gsEmptyStringCount = await prisma.gsCashflowRow.count({
      where: { activity: '' }
    })
    
    console.log(`–ó–∞–ø–∏—Å–µ–π –≤ Google Sheets —Å activity = "": ${gsEmptyStringCount}`)
    
    console.log('\nüìä 4. –ü—Ä–∏–º–µ—Ä—ã –∏–∑ Google Sheets —Å NULL –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é:')
    
    const gsNullExamples = await prisma.gsCashflowRow.findMany({
      where: { activity: null },
      select: {
        id: true,
        amount: true,
        activity: true,
        comment: true,
        date: true,
        fund: true,
        supplier: true
      },
      take: 10,
      orderBy: { date: 'desc' }
    })
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${gsNullExamples.length} –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ Google Sheets:`)
    gsNullExamples.forEach((gs, index) => {
      console.log(`  ${index + 1}. ${(gs.amount/100).toFixed(2)}‚ÇΩ (${gs.date?.toISOString().slice(0,10) || '–Ω–µ—Ç –¥–∞—Ç—ã'})`)
      console.log(`     –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${gs.activity}`)
      console.log(`     –§–æ–Ω–¥: ${gs.fund || '–Ω–µ—Ç'}`)
      console.log(`     –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${gs.supplier || '–Ω–µ—Ç'}`)
      console.log(`     –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${gs.comment || '–Ω–µ—Ç'}`)
      console.log('')
    })
    
    console.log('\nüìä 5. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º:')
    
    const allStats = await prisma.transaction.groupBy({
      by: ['activity'],
      where: { tenantId: tenant.id },
      _count: { activity: true }
    })
    
    allStats.forEach(stat => {
      const activity = stat.activity || 'NULL'
      console.log(`  "${activity}": ${stat._count.activity} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkNullCount()
