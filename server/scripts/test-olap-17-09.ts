import { IikoClient } from '../src/modules/iiko/client'

const client = new IikoClient()

async function testOlap() {
  try {
    console.log('üîç –ó–∞–ø—Ä–æ—Å OLAP –¥–∞–Ω–Ω—ã—Ö –∑–∞ 17.09.2025\n')
    
    const body = {
      reportType: 'SALES',
      buildSummary: true,
      groupByRowFields: ['SessionNum', 'OrderNum', 'PayTypes', 'WaiterName', 'CashRegisterName'],
      groupByColFields: [],
      aggregateFields: ['DishSumInt', 'DishDiscountSumInt'],
      filters: {
        'OpenDate.Typed': { 
          filterType: 'DateRange', 
          periodType: 'CUSTOM', 
          from: '2025-09-17T00:00:00',
          to: '2025-09-18T00:00:00'
        }
      }
    }
    
    const result: any = await client.postOlap(body)
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${result.data?.length || 0}\n`)
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–º–µ–Ω–∞–º
    const bySession = new Map<number, any[]>()
    
    for (const row of result.data || []) {
      const sessionNum = row.SessionNum
      if (!bySession.has(sessionNum)) {
        bySession.set(sessionNum, [])
      }
      bySession.get(sessionNum)!.push(row)
    }
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–º–µ–Ω–∞–º:\n')
    
    for (const [sessionNum, rows] of Array.from(bySession.entries()).sort((a, b) => a[0] - b[0])) {
      const totalSum = rows.reduce((sum, r) => sum + (r.DishDiscountSumInt || 0), 0)
      const orderNums = new Set(rows.map(r => r.OrderNum))
      
      console.log(`–°–º–µ–Ω–∞ #${sessionNum}:`)
      console.log(`  –ß–µ–∫–æ–≤: ${orderNums.size}`)
      console.log(`  –°—É–º–º–∞: ${totalSum} ‚ÇΩ`)
      console.log(`  –°—Ç—Ä–æ–∫ OLAP: ${rows.length}`)
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º
      const byWaiter = new Map<string, number>()
      rows.forEach(r => {
        const waiter = r.WaiterName || 'unknown'
        byWaiter.set(waiter, (byWaiter.get(waiter) || 0) + 1)
      })
      
      console.log(`  –û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã:`)
      for (const [waiter, count] of byWaiter.entries()) {
        console.log(`    - ${waiter}: ${count} —Å—Ç—Ä–æ–∫`)
      }
      console.log('')
    }
    
    console.log('üìã –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ OLAP:')
    result.data?.slice(0, 5).forEach((r: any, i: number) => {
      console.log(`\n${i + 1}. –°–º–µ–Ω–∞ #${r.SessionNum}, —á–µ–∫ ${r.OrderNum}`)
      console.log(`   –û—Ñ–∏—Ü–∏–∞–Ω—Ç: ${r.WaiterName}`)
      console.log(`   –ö–∞—Å—Å–∞: ${r.CashRegisterName}`)
      console.log(`   –û–ø–ª–∞—Ç—ã: ${r.PayTypes}`)
      console.log(`   –°—É–º–º–∞: ${r.DishDiscountSumInt} ‚ÇΩ`)
    })
    
  } catch (e: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', e.message)
  }
}

testOlap()

