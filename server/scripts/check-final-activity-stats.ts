import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkFinalActivityStats() {
  try {
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º...\n')
    
    // –ü–æ–ª—É—á–∞–µ–º tenant
    const tenant = await prisma.tenant.findFirst()
    if (!tenant) {
      throw new Error('Tenant –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö:')
    
    const stats = await prisma.transaction.groupBy({
      by: ['activity'],
      where: { tenantId: tenant.id },
      _count: { activity: true }
    })
    
    stats.forEach(stat => {
      const activity = stat.activity || 'NULL'
      console.log(`  "${activity}": ${stat._count.activity} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
    })
    
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º –≤ Google Sheets:')
    
    const gsStats = await prisma.gsCashflowRow.groupBy({
      by: ['activity'],
      _count: { activity: true }
    })
    
    gsStats.forEach(stat => {
      const activity = stat.activity || 'NULL'
      console.log(`  "${activity}": ${stat._count.activity} –∑–∞–ø–∏—Å–µ–π`)
    })
    
    console.log('\n‚úÖ –¢–µ–ø–µ—Ä—å –≤ –î–î–° –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –≥—Ä—É–ø–ø–∞ "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è"!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkFinalActivityStats()
