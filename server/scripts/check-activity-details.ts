import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkActivityDetails() {
  try {
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...\n')
    
    // –ü–æ–ª—É—á–∞–µ–º tenant
    const tenant = await prisma.tenant.findFirst()
    if (!tenant) {
      throw new Error('Tenant –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
    console.log('üìä 1. –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö:')
    const transactionActivities = await prisma.transaction.findMany({
      where: { tenantId: tenant.id },
      select: { activity: true },
      distinct: ['activity']
    })
    
    transactionActivities.forEach((tx, index) => {
      const activity = tx.activity || 'NULL'
      const length = activity.length
      const chars = activity.split('').map(c => `${c}(${c.charCodeAt(0)})`).join(' ')
      console.log(`  ${index + 1}. "${activity}" (–¥–ª–∏–Ω–∞: ${length})`)
      console.log(`     –°–∏–º–≤–æ–ª—ã: ${chars}`)
    })
    
    console.log('\nüìä 2. –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ Google Sheets:')
    const gsActivities = await prisma.gsCashflowRow.findMany({
      select: { activity: true },
      distinct: ['activity']
    })
    
    gsActivities.forEach((gs, index) => {
      const activity = gs.activity || 'NULL'
      const length = activity.length
      const chars = activity.split('').map(c => `${c}(${c.charCodeAt(0)})`).join(' ')
      console.log(`  ${index + 1}. "${activity}" (–¥–ª–∏–Ω–∞: ${length})`)
      console.log(`     –°–∏–º–≤–æ–ª—ã: ${chars}`)
    })
    
    console.log('\nüìä 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –≤ "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è":')
    
    // –ò—â–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω" (—Å —Ä–∞–∑–Ω—ã–º–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º–∏)
    const operatingLike = await prisma.transaction.findMany({
      where: { 
        tenantId: tenant.id,
        activity: { contains: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω' }
      },
      select: { activity: true },
      distinct: ['activity']
    })
    
    console.log('–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω":')
    operatingLike.forEach((tx, index) => {
      const activity = tx.activity || 'NULL'
      const length = activity.length
      const chars = activity.split('').map(c => `${c}(${c.charCodeAt(0)})`).join(' ')
      console.log(`  ${index + 1}. "${activity}" (–¥–ª–∏–Ω–∞: ${length})`)
      console.log(`     –°–∏–º–≤–æ–ª—ã: ${chars}`)
    })
    
    console.log('\nüìä 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∫—Ä—ã—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã:')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const allActivities = await prisma.transaction.findMany({
      where: { tenantId: tenant.id },
      select: { activity: true },
      distinct: ['activity']
    })
    
    allActivities.forEach((tx, index) => {
      const activity = tx.activity || 'NULL'
      if (activity !== 'NULL') {
        const hasInvisibleChars = /[\u200B-\u200D\uFEFF\u00A0\u2000-\u200F\u2028-\u202F\u205F-\u206F]/.test(activity)
        const trimmed = activity.trim()
        const isDifferent = activity !== trimmed
        
        console.log(`  ${index + 1}. "${activity}"`)
        console.log(`     –ï—Å—Ç—å –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: ${hasInvisibleChars}`)
        console.log(`     –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç trim(): ${isDifferent}`)
        console.log(`     –ü–æ—Å–ª–µ trim(): "${trimmed}"`)
        
        if (hasInvisibleChars || isDifferent) {
          const chars = activity.split('').map((c, i) => {
            const code = c.charCodeAt(0)
            const isInvisible = code < 32 || (code >= 127 && code <= 159)
            return `${c}(${code})${isInvisible ? '‚ö†Ô∏è' : ''}`
          }).join(' ')
          console.log(`     –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: ${chars}`)
        }
      }
    })
    
    console.log('\nüìä 5. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–ª–∏–Ω–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É:')
    
    const grouped = new Map<string, number>()
    for (const tx of allActivities) {
      const activity = tx.activity || 'NULL'
      const key = `${activity.length}:${activity}`
      grouped.set(key, (grouped.get(key) || 0) + 1)
    }
    
    for (const [key, count] of grouped.entries()) {
      console.log(`  "${key}" - ${count} –∑–∞–ø–∏—Å–µ–π`)
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkActivityDetails()
