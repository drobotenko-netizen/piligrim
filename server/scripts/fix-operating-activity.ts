import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function fixOperatingActivity() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "OPERATING" –Ω–∞ "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è"...\n')
    
    // –ü–æ–ª—É—á–∞–µ–º tenant
    const tenant = await prisma.tenant.findFirst()
    if (!tenant) {
      throw new Error('Tenant –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
    console.log('üìä 1. –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é "OPERATING":')
    
    const operatingTransactions = await prisma.transaction.findMany({
      where: { 
        tenantId: tenant.id,
        activity: 'OPERATING'
      },
      select: {
        id: true,
        kind: true,
        amount: true,
        activity: true,
        note: true,
        paymentDate: true
      }
    })
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${operatingTransactions.length} –∑–∞–ø–∏—Å–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é "OPERATING":`)
    
    for (const tx of operatingTransactions) {
      console.log(`  - ${tx.kind} ${(tx.amount/100).toFixed(2)}‚ÇΩ (${tx.paymentDate.toISOString().slice(0,10)}) - ${tx.note || '–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`)
    }
    
    if (operatingTransactions.length > 0) {
      console.log('\nüìä 2. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è":')
      
      const updateResult = await prisma.transaction.updateMany({
        where: { 
          tenantId: tenant.id,
          activity: 'OPERATING'
        },
        data: { activity: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è' }
      })
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updateResult.count} –∑–∞–ø–∏—Å–µ–π`)
    }
    
    console.log('\nüìä 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:')
    
    const remainingOperating = await prisma.transaction.count({
      where: { 
        tenantId: tenant.id,
        activity: 'OPERATING'
      }
    })
    
    console.log(`–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é "OPERATING": ${remainingOperating}`)
    
    console.log('\nüìä 4. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º:')
    
    const finalStats = await prisma.transaction.groupBy({
      by: ['activity'],
      where: { tenantId: tenant.id },
      _count: { activity: true }
    })
    
    finalStats.forEach(stat => {
      const activity = stat.activity || 'NULL'
      console.log(`  "${activity}": ${stat._count.activity} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
    })
    
    console.log('\n‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è"!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixOperatingActivity()
