import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function fixNullActivities() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å NULL –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é...\n')
    
    // –ü–æ–ª—É—á–∞–µ–º tenant
    const tenant = await prisma.tenant.findFirst()
    if (!tenant) {
      throw new Error('Tenant –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
    console.log('üìä 1. –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ —Å NULL –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é:')
    
    const nullTransactions = await prisma.transaction.findMany({
      where: { 
        tenantId: tenant.id,
        activity: null
      },
      include: {
        category: {
          select: { name: true, activity: true }
        }
      }
    })
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${nullTransactions.length} –∑–∞–ø–∏—Å–µ–π —Å NULL –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é:`)
    
    for (const tx of nullTransactions) {
      console.log(`\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${tx.kind} ${(tx.amount/100).toFixed(2)}‚ÇΩ (${tx.paymentDate.toISOString().slice(0,10)})`)
      console.log(`  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${tx.category?.name || '–Ω–µ—Ç'}`)
      console.log(`  –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${tx.category?.activity || '–Ω–µ—Ç'}`)
      console.log(`  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${tx.note || '–Ω–µ—Ç'}`)
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      let correctActivity = null
      
      if (tx.category?.activity) {
        // –ë–µ—Ä–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        correctActivity = tx.category.activity
      } else if (tx.note?.toLowerCase().includes('–ø–µ—Ä–µ–≤–æ–¥') || tx.kind === 'transfer') {
        // –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"
        correctActivity = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è'
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è"
        correctActivity = '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è'
      }
      
      console.log(`  ‚Üí –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: "${correctActivity}"`)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
      await prisma.transaction.update({
        where: { id: tx.id },
        data: { activity: correctActivity }
      })
      
      console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ`)
    }
    
    console.log('\nüìä 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:')
    
    const remainingNulls = await prisma.transaction.count({
      where: { 
        tenantId: tenant.id,
        activity: null
      }
    })
    
    console.log(`–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π —Å NULL –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: ${remainingNulls}`)
    
    if (remainingNulls === 0) {
      console.log('‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —Å NULL –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!')
    } else {
      console.log('‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏ —Å NULL –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é')
    }
    
    console.log('\nüìä 3. –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º:')
    
    const newStats = await prisma.transaction.groupBy({
      by: ['activity'],
      where: { tenantId: tenant.id },
      _count: { activity: true }
    })
    
    newStats.forEach(stat => {
      const activity = stat.activity || 'NULL'
      console.log(`  "${activity}": ${stat._count.activity} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixNullActivities()
