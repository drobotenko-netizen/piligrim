import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkActivityCaseSensitive() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ø–æ—Ö–æ–∂–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤...\n')
    
    // –ü–æ–ª—É—á–∞–µ–º tenant
    const tenant = await prisma.tenant.findFirst()
    if (!tenant) {
      throw new Error('Tenant –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
    console.log('üìä 1. –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ "–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω" (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞):')
    
    // –ò—â–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç "–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω" –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    const allTransactions = await prisma.transaction.findMany({
      where: { tenantId: tenant.id },
      select: { activity: true }
    })
    
    const operatingVariants = new Map<string, number>()
    
    for (const tx of allTransactions) {
      const activity = tx.activity || ''
      if (activity.toLowerCase().includes('–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω')) {
        operatingVariants.set(activity, (operatingVariants.get(activity) || 0) + 1)
      }
    }
    
    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:')
    for (const [variant, count] of operatingVariants.entries()) {
      console.log(`  "${variant}" - ${count} –∑–∞–ø–∏—Å–µ–π`)
    }
    
    console.log('\nüìä 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏:')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Å –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ
    const latinCyrillicMap = {
      '–û': 'O', // –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è –û vs –õ–∞—Ç–∏–Ω—Å–∫–∞—è O
      '–æ': 'o', // –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è –æ vs –õ–∞—Ç–∏–Ω—Å–∫–∞—è o
      '—Ä': 'p', // –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è —Ä vs –õ–∞—Ç–∏–Ω—Å–∫–∞—è p
      '–∞': 'a', // –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è –∞ vs –õ–∞—Ç–∏–Ω—Å–∫–∞—è a
      '–µ': 'e', // –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è –µ vs –õ–∞—Ç–∏–Ω—Å–∫–∞—è e
      '—Å': 'c', // –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è —Å vs –õ–∞—Ç–∏–Ω—Å–∫–∞—è c
      '—Ö': 'x', // –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è —Ö vs –õ–∞—Ç–∏–Ω—Å–∫–∞—è x
      '—É': 'y', // –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è —É vs –õ–∞—Ç–∏–Ω—Å–∫–∞—è y
      '–Ω': 'n', // –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è –Ω vs –õ–∞—Ç–∏–Ω—Å–∫–∞—è n
      '–∏': 'i', // –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è –∏ vs –õ–∞—Ç–∏–Ω—Å–∫–∞—è i
      '—Ç': 't', // –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è —Ç vs –õ–∞—Ç–∏–Ω—Å–∫–∞—è t
      '—è': 'ya', // –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è —è vs –õ–∞—Ç–∏–Ω—Å–∫–∞—è ya
    }
    
    const allActivities = await prisma.transaction.findMany({
      where: { tenantId: tenant.id },
      select: { activity: true },
      distinct: ['activity']
    })
    
    for (const tx of allActivities) {
      const activity = tx.activity || ''
      if (activity.toLowerCase().includes('–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω')) {
        console.log(`\n–ü—Ä–æ–≤–µ—Ä—è–µ–º: "${activity}"`)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
        for (let i = 0; i < activity.length; i++) {
          const char = activity[i]
          const code = char.charCodeAt(0)
          const isCyrillic = code >= 1040 && code <= 1103
          const isLatin = (code >= 65 && code <= 90) || (code >= 97 && code <= 122)
          
          if (isLatin) {
            console.log(`  –ü–æ–∑–∏—Ü–∏—è ${i}: "${char}" (–∫–æ–¥: ${code}) - –õ–ê–¢–ò–ù–°–ö–ê–Ø –ë–£–ö–í–ê!`)
          } else if (isCyrillic) {
            console.log(`  –ü–æ–∑–∏—Ü–∏—è ${i}: "${char}" (–∫–æ–¥: ${code}) - –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è`)
          } else {
            console.log(`  –ü–æ–∑–∏—Ü–∏—è ${i}: "${char}" (–∫–æ–¥: ${code}) - –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª`)
          }
        }
      }
    }
    
    console.log('\nüìä 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ Google Sheets:')
    
    const gsActivities = await prisma.gsCashflowRow.findMany({
      select: { activity: true },
      distinct: ['activity']
    })
    
    for (const gs of gsActivities) {
      const activity = gs.activity || ''
      if (activity.toLowerCase().includes('–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω')) {
        console.log(`\nGS: "${activity}"`)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
        for (let i = 0; i < activity.length; i++) {
          const char = activity[i]
          const code = char.charCodeAt(0)
          const isCyrillic = code >= 1040 && code <= 1103
          const isLatin = (code >= 65 && code <= 90) || (code >= 97 && code <= 122)
          
          if (isLatin) {
            console.log(`  –ü–æ–∑–∏—Ü–∏—è ${i}: "${char}" (–∫–æ–¥: ${code}) - –õ–ê–¢–ò–ù–°–ö–ê–Ø –ë–£–ö–í–ê!`)
          } else if (isCyrillic) {
            console.log(`  –ü–æ–∑–∏—Ü–∏—è ${i}: "${char}" (–∫–æ–¥: ${code}) - –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è`)
          } else {
            console.log(`  –ü–æ–∑–∏—Ü–∏—è ${i}: "${char}" (–∫–æ–¥: ${code}) - –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª`)
          }
        }
      }
    }
    
    console.log('\nüìä 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—à–∞–Ω–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:')
    
    // –ò—â–µ–º –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–º–µ—Å—å –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏ –ª–∞—Ç–∏–Ω–∏—Ü—ã
    const mixedEncoding = await prisma.transaction.findMany({
      where: { 
        tenantId: tenant.id,
        activity: { not: null }
      },
      select: { activity: true }
    })
    
    for (const tx of mixedEncoding) {
      const activity = tx.activity || ''
      if (activity.includes('–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω') || activity.includes('–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω')) {
        const hasLatin = /[a-zA-Z]/.test(activity)
        const hasCyrillic = /[–∞-—è–ê-–Ø]/.test(activity)
        
        if (hasLatin && hasCyrillic) {
          console.log(`–°–º–µ—à–∞–Ω–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞: "${activity}"`)
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkActivityCaseSensitive()
