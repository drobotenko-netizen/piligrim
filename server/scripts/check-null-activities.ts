import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkNullActivities() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å NULL –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é...\n')
    
    // –ü–æ–ª—É—á–∞–µ–º tenant
    const tenant = await prisma.tenant.findFirst()
    if (!tenant) {
      throw new Error('Tenant –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
    console.log('üìä 1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ NULL –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö:')
    
    const nullActivityStats = await prisma.transaction.groupBy({
      by: ['activity'],
      where: { 
        tenantId: tenant.id,
        OR: [
          { activity: null },
          { activity: '' },
          { activity: 'NULL' }
        ]
      },
      _count: { activity: true }
    })
    
    console.log('–ó–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é:')
    nullActivityStats.forEach(stat => {
      const activity = stat.activity || 'NULL'
      console.log(`  - "${activity}": ${stat._count.activity} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
    })
    
    console.log('\nüìä 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö "–ø—É—Å—Ç—ã—Ö" –∑–Ω–∞—á–µ–Ω–∏–π:')
    
    const allActivities = await prisma.transaction.findMany({
      where: { tenantId: tenant.id },
      select: { activity: true },
      distinct: ['activity']
    })
    
    console.log('–í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:')
    allActivities.forEach((tx, index) => {
      const activity = tx.activity
      const isNull = activity === null
      const isEmpty = activity === ''
      const isNullString = activity === 'NULL'
      const length = activity ? activity.length : 0
      
      console.log(`  ${index + 1}. ${isNull ? 'NULL' : `"${activity}"`} (–¥–ª–∏–Ω–∞: ${length})`)
      console.log(`     isNull: ${isNull}, isEmpty: ${isEmpty}, isNullString: ${isNullString}`)
    })
    
    console.log('\nüìä 3. –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏:')
    
    const examples = await prisma.transaction.findMany({
      where: { tenantId: tenant.id },
      select: {
        id: true,
        kind: true,
        amount: true,
        activity: true,
        note: true,
        paymentDate: true
      },
      take: 20,
      orderBy: { paymentDate: 'desc' }
    })
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const grouped = new Map<string, any[]>()
    for (const tx of examples) {
      const activity = tx.activity || 'NULL'
      if (!grouped.has(activity)) grouped.set(activity, [])
      grouped.get(activity)!.push(tx)
    }
    
    for (const [activity, txs] of grouped.entries()) {
      console.log(`\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activity === 'NULL' ? 'NULL' : `"${activity}"`} (${txs.length} –ø—Ä–∏–º–µ—Ä–æ–≤)`)
      txs.slice(0, 3).forEach(tx => {
        console.log(`  - ${tx.kind} ${(tx.amount/100).toFixed(2)}‚ÇΩ (${tx.paymentDate.toISOString().slice(0,10)}) - ${tx.note || '–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`)
      })
      if (txs.length > 3) {
        console.log(`  ... –∏ –µ—â–µ ${txs.length - 3} –∑–∞–ø–∏—Å–µ–π`)
      }
    }
    
    console.log('\nüìä 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ Google Sheets:')
    
    const gsNullStats = await prisma.gsCashflowRow.groupBy({
      by: ['activity'],
      where: {
        OR: [
          { activity: null },
          { activity: '' },
          { activity: 'NULL' }
        ]
      },
      _count: { activity: true }
    })
    
    console.log('–ó–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ Google Sheets:')
    gsNullStats.forEach(stat => {
      const activity = stat.activity || 'NULL'
      console.log(`  - "${activity}": ${stat._count.activity} –∑–∞–ø–∏—Å–µ–π`)
    })
    
    console.log('\nüìä 5. –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ Google Sheets:')
    
    const gsActivities = await prisma.gsCashflowRow.findMany({
      select: { activity: true },
      distinct: ['activity']
    })
    
    gsActivities.forEach((gs, index) => {
      const activity = gs.activity
      const isNull = activity === null
      const isEmpty = activity === ''
      const isNullString = activity === 'NULL'
      const length = activity ? activity.length : 0
      
      console.log(`  ${index + 1}. ${isNull ? 'NULL' : `"${activity}"`} (–¥–ª–∏–Ω–∞: ${length})`)
      console.log(`     isNull: ${isNull}, isEmpty: ${isEmpty}, isNullString: ${isNullString}`)
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkNullActivities()
