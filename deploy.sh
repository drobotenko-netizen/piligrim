#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è Piligrim
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh v2025.01.10-XX

set -e

VERSION=$1

if [ -z "$VERSION" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é"
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh v2025.01.10-XX"
    exit 1
fi

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –≤–µ—Ä—Å–∏–∏ $VERSION"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if ! git tag | grep -q "^$VERSION$"; then
    echo "‚ùå –û—à–∏–±–∫–∞: –¢–µ–≥ $VERSION –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:"
    git tag | tail -5
    exit 1
fi

echo "‚úÖ –¢–µ–≥ $VERSION –Ω–∞–π–¥–µ–Ω"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å GitHub Actions
echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤..."
LATEST_RUN=$(curl -s "https://api.github.com/repos/drobotenko-netizen/piligrim/actions/runs?per_page=1" | jq -r '.workflow_runs[0].conclusion // "unknown"')

if [ "$LATEST_RUN" != "success" ]; then
    echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü–æ—Å–ª–µ–¥–Ω–∏–π workflow –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å —Å—Ç–∞—Ç—É—Å–æ–º: $LATEST_RUN"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ: https://github.com/drobotenko-netizen/piligrim/actions"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–ø–ª–æ–π? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå –î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω–µ–Ω"
        exit 1
    fi
fi

echo "‚úÖ –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
echo ""

# –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
echo "üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."

ssh yc-vm << EOF
set -e

echo "üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã..."
docker pull ghcr.io/drobotenko-netizen/piligrim/piligrim-web:$VERSION
docker pull ghcr.io/drobotenko-netizen/piligrim/piligrim-api:$VERSION

echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker stop api web 2>/dev/null || true
docker rm api web 2>/dev/null || true

echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker run -d --name api --network infra_default --restart unless-stopped \\
  -e PORT=4000 -e NODE_ENV=production -e DATABASE_URL=file:/data/dev.db \\
  -v piligrim_api_data:/data ghcr.io/drobotenko-netizen/piligrim/piligrim-api:$VERSION

docker run -d --name web --network infra_default --restart unless-stopped \\
  -e NODE_ENV=production -e PORT=3000 -e NEXT_PUBLIC_API_BASE=https://piligrim.5-star-roi.ru \\
  ghcr.io/drobotenko-netizen/piligrim/piligrim-web:$VERSION

echo "üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ —Å–µ—Ç–∏ proxy..."
docker network connect proxy api 2>/dev/null || true
docker network connect proxy web 2>/dev/null || true

echo "‚è±Ô∏è  –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
sleep 5

echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"
EOF

echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API
API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://piligrim.5-star-roi.ru/api/health)
if [ "$API_STATUS" = "200" ]; then
    echo "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç (HTTP $API_STATUS)"
else
    echo "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $API_STATUS)"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Frontend
FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://piligrim.5-star-roi.ru/)
if [[ "$FRONTEND_STATUS" =~ ^(200|307|302)$ ]]; then
    echo "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç (HTTP $FRONTEND_STATUS)"
else
    echo "‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $FRONTEND_STATUS)"
fi

echo ""
echo "üéâ –î–µ–ø–ª–æ–π –≤–µ—Ä—Å–∏–∏ $VERSION –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: https://piligrim.5-star-roi.ru/"
echo "üîß API: https://piligrim.5-star-roi.ru/api/health"
echo ""
echo "üìã –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./check_server_version.sh"
